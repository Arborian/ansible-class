- hosts: ansible.training.arborian.com
  gather_facts: no
  become: yes
  tasks:
  - name: Set hostname
    hostname:
      name: "{{inventory_hostname}}"

  - lineinfile:
      path: /etc/hosts
      line: 127.0.0.1 {{inventory_hostname}}

  - name: Install packages
    loop:
      - nvme-cli
      - awscli
      - python3
      - python3-dev
      - python3-venv
      - python3-pip
      - libssl-dev
      - build-essential
    apt:
      name: "{{item}}"
      update_cache: yes

  - name: Install Ansible and essential Ansible support packages
    loop:
      - ansible
      - boto3
      - boto
    pip:
      name: "{{item}}"

  - name: Generate (shared) ssh key
    register: ssh_keypair
    openssh_keypair:
      path: /tmp/id_ssh_rsa

  - name: Fetch (shared) ssh key
    fetch:
      src: /tmp/id_ssh_rsa
      dest: class_rsa_key
      flat: yes

  - name: Upload ssh key to aws
    become: no
    local_action:
      module: ec2_key
      name: ansible-class-key
      region: "{{region}}"
      key_material: "{{ssh_keypair.public_key}}"

  - name: Create class bucket
    become: no
    register: bucket
    local_action:
      module: s3_bucket
      region: "{{region}}"
      name: ansible-class-bucket

  - name: Create class role
    become: no
    local_action:
      module: iam_role
      region: "{{region}}"
      name: ansible-class-role
      assume_role_policy_document:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: {"Service": "ec2.amazonaws.com"}
            Action: "sts:AssumeRole"

  - name: Create class policy
    become: no
    local_action:
      module: iam_policy
      iam_name: ansible-class-role
      iam_type: role
      policy_name: ansible-class-policy
      state: present
      policy_json:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:ListBucket"
            Resource: "arn:aws:s3:::ansible-class-bucket"
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectAcl"
              - "s3:PutObject"
              - "s3:PutObjectAcl"
              - "s3:DeleteObject"
            Resource: "arn:aws:s3:::ansible-class-bucket/*"

  - name: Create class security group
    become: no
    local_action:
      module: ec2_group
      region: "{{region}}"
      name: ansible-class-sg
      vpc_id: vpc-009b211dc70a179fc
      description: "Security group for class"
      rules:
        - proto: tcp
          ports:
            - 80
            - 443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          ports:
            - 0-65535
          group_name:
            - ansible-class-sg
        - proto: tcp
          ports:
            - 0-65535
          cidr_ip:
            - 3.226.124.186/32
            - 172.17.6.120/32

  - name: Create users
    loop: "{{users}}"
    user:
      name: "{{item.username}}"
      shell: /bin/bash

  - name: Ensure ssh dir exists
    loop: "{{users}}"
    file:
      path: /home/{{item.username}}/.ssh
      state: directory
      mode: '0700'
      owner: "{{item.username}}"

  - name: Copy ssh private key
    loop: "{{users}}"
    command: cp /tmp/id_ssh_rsa /home/{{item.username}}/.ssh/id_rsa
    args:
      creates: /home/{{item.username}}/.ssh/id_rsa

  - name: Chmod ssh private key
    loop: "{{users}}"
    file:
      path: /home/{{item.username}}/.ssh/id_rsa
      mode: '0600'
      owner: "{{item.username}}"

  - name: Set authorized key taken from file
    loop: "{{users}}"
    authorized_key:
      user: "{{item.username}}"
      state: present
      key: "{{ssh_keypair.public_key}}"

  - name: Create student servers
    loop: "{{users}}"
    become: no
    register: student_servers
    local_action:
      module: ec2_instance
      region: "{{region}}"
      name: "{{item.username}}-instance"
      key_name: ansible-class-key
      image_id:   ami-070703f38341d8316
      vpc_subnet_id: subnet-0da0eed5db76664f3
      instance_type: t3.nano
      instance_role: ansible-class-role
      security_group: ansible-class-sg
      network:
        assign_public_ip: yes
      tags:
        student_email: "{{item.email}}"
        student_name: "{{item.name}}"

  - debug: var=student_servers

  - name: Setup class inventory
    loop: "{{users}}"
    template:
      src: student_servers.yaml.j2
      dest: /home/{{item.username}}/inventory.yaml
      mode: "0644"
      owner: "{{item.username}}"

  - name: Setup class config
    loop: "{{users}}"
    template:
      src: student_config.j2
      dest: /home/{{item.username}}/ansible.cfg
      mode: "0644"
      owner: "{{item.username}}"

